/* test/functional.js
 *
 * Functional tests for ospry-node bindings
 *
 * Pass in environment variables to configure tests
 *
 * OSPRY_SECRET_KEY (required) 
 * OSPRY_PUBLIC_KEY (required)
 * CLAIMING_ENABLED - (true / false) Whether the account you're testing has claiming enabled (defalts to false)
 * USE_LOCAL - (true/false) Whether to use a local development server, or live API (defaults to live)
 */

var test = require('tape');
var Ospry = require('../lib/ospry.js');

var fs = require('fs');
var url = require('url');

var secretAPIKey = process.env.OSPRY_SECRET_KEY;
var publicAPIKey = process.env.OSPRY_PUBLIC_KEY;
var claimingEnabled = !!(process.env.CLAIMING_ENABLED === 'true');
var useLocalServer = !!(process.env.USE_LOCAL === 'true');

if (!secretAPIKey) {
  console.error('A valid secret API key is required to run tests!');
  process.exit(1);
}

if (!publicAPIKey) {
  console.error('A valid public API key is required to run tests!');
  process.exit(1);
}

var ospry = new Ospry(secretAPIKey);
ospry._serverURL = useLocalServer ? 'https://localhost:10444/v1' : ospry._serverURL;
ospry._strictSSL = false;

var ospryPublicClient = new Ospry(publicAPIKey);
ospryPublicClient._serverURL = useLocalServer ? 'https://localhost:10444/v1' : ospryPublicClient._serverURL;
ospryPublicClient._strictSSL = false;

var testSubdomain = 'test-node';
var testPublicUpload  = null;

var imageURL      = 'http://foo.ospry.io/bar/baz.png';
var localImageURL = 'http://ospry.io/bar/baz.png?subdomain=foo';

var File_SmallJPG  = __dirname + '/img/small.jpg';

// Utility methods

var _isObject   = function(o) { return (typeof o === 'object' && o !== null && !(o instanceof Array)); };
var _isArray    = function(a) { return (a instanceof Array); };
var _isNumber   = function(n) { return (typeof n === 'number'); };
var _isString   = function(s) { return (typeof s === 'string'); };
var _isFunction = function(f) { return (typeof f === 'function'); };

// Common validation

// Verifies that errors generated by the library implement a 
// basic Error contract: 'name', 'message', and 'statusCode'.

var validateCommonErrorAsserts = 4;
var validateCommonError = function(t, err) {
  t.ok(_isObject(err), 'has error');
  t.ok(_isString(err.name), '-- err.name');
  t.ok(_isString(err.message), '-- err.message');
  t.ok(_isNumber(err.statusCode), '-- err.statusCode');
};

// Tests input validation for all library methods with (id, callback)
// argument pairs.
var validateIdCallbackPair = function(t, fn) {
  t.plan(4);
  t.throws(function(){ fn()}, /required id/, 'id not provided --> THROW');
  t.throws(function(){ fn({})}, /required id/, 'id not a string --> THROW');
  t.throws(function(){ fn('id')}, /required callback/, 'callback not provided --> THROW');
  t.throws(function(){ fn('id', {})}, /required callback/, 'callback not a function --> THROW');
};

test('ospry.up: Validate Inputs', function(t) {
  t.plan(4);
  t.throws(function() { ospry.up(); }, /required options/, 'No options');
  t.throws(function() { ospry.up([]); }, /required options/, 'Options is not an object');
  t.throws(function() { ospry.up({}); }, /required filename/, 'No filename');
  t.throws(function() { ospry.up({}); }, /required filename/, 'Filename not a string');
});

test('ospry.up: Upload Image', function(t) {
  t.plan(8);
  var filename = 'test-small.jpg';
  var validateResponse = function(metadata) {
    t.ok(_isObject(metadata), 'Got image metadata');
    t.equal(metadata.isClaimed, true, 'Image is claimed');
    t.equal(metadata.isPrivate, false, 'Image is public');
    t.equal(metadata.filename, filename, 'Has correct filename');
    t.equal(metadata.format, 'jpeg', 'Has correct format');
    t.equal(metadata.size, 52605, 'Has correct size');
    t.equal(metadata.height, 375, 'Has correct height');
    t.equal(metadata.width, 500, 'Has correct width');
    testPublicUpload = metadata;
  };
  var upload = ospry.up({
    filename: filename,
    imageReady: function(err, metadata) {
      validateResponse(metadata);
    }
  });
  fs.createReadStream(File_SmallJPG).pipe(upload);
});

test('ospry.up: Upload Error - Invalid Filename', function(t) {
  t.plan(2 + validateCommonErrorAsserts);
  var filename = '';
  var validateError = function(err) {
    validateCommonError(t, err);
    t.equal(err.name, 'missing-filename', 'Caught missing filename');
  };
  var upload = ospry.up({
    filename: filename,
    imageReady: function(err, metadata) {
      t.equal(metadata, null, 'Image metadata is null');
      validateError(err);
    }
  });
  fs.createReadStream(File_SmallJPG).pipe(upload);
});

test('ospry.up: Upload Error - No Filename', function(t) {
  t.plan(2 + validateCommonErrorAsserts);
  var filename = '';
  var validate = function(err, metadata) {
    t.equal(metadata, null, 'metadata === null');
    validateCommonError(t, err);
    t.equal(err.name, 'missing-filename', 'type === missing-filename');
  };
  var upload = ospry.up({
    filename: filename,
    imageReady: validate,
  });
  fs.createReadStream(File_SmallJPG).pipe(upload);
});

test('ospry.get: Validate Inputs', function(t) {
  t.plan(4);
  t.throws(function() { ospry.get(); },   /required options/,   'no options            --> THROW');
  t.throws(function() { ospry.get([]); }, /required options/,   'options not an object --> THROW');
  t.throws(function() { ospry.get({}); }, /required image url/, 'no url                --> THROW');
  t.throws(function() { ospry.get({}); }, /required image url/, 'url not a string      --> THROW');
});

test('ospry.get: Download Image', function(t) {
  t.plan(1);
  var filename = 'test-download.jpg';
  var dest = __dirname + '/downloads/' + filename;
  var downloadComplete = function(err) {
    if (err !== null) {
      // Clean up pipe, and temp file
      t.fail('download failed');
    }
    // TODO: validate downloaded image
    t.pass('download complete');
  };
  var download = function(url) {
    var file = fs.createWriteStream(dest);
    var opts = {
      url: url,
      imageReady: downloadComplete,
    };
    var download = ospry.get(opts);
    download.pipe(file);
  };

  download(testPublicUpload.url);
});

test('ospry.get: Download 404', function(t) {
  t.plan(1 + validateCommonErrorAsserts);
  var filename = '404-download.jpg';
  var dest = __dirname + '/downloads/' + filename;
  var downloadComplete = function(err) {
    if (err !== null) {
      validateCommonError(t, err);
      t.equal(err.name, 'not-found', 'type === not-found');
      return;
    }
    t.end();
  }
  var file = fs.createWriteStream(dest);
  var brokenURL = url.parse(testPublicUpload.url);
  brokenURL.pathname = '/abc/something-else.jpg';
  brokenURL = url.format(brokenURL);

  var download = ospry.get({
    url: brokenURL, // To force 404
    imageReady: downloadComplete,
  });

  download.pipe(file);
});

// TODO: Validate forbidden

test('ospry.getMetadata: Validate Inputs', function(t) {
  validateIdCallbackPair(t, ospry.getMetadata);
});

test('ospry.getMetadata: Get Public Metadata', function(t) {
  t.plan(2);
  var id = testPublicUpload.id;
  ospry.getMetadata(id, function(err, meta) {
    t.ok(_isObject(meta));
    t.deepEqual(meta, testPublicUpload, 'metadata matches');
  });
});

test('ospry.formatURL: Validate Inputs', function(t) {
  t.plan(3);
  t.throws(function() { ospry.formatURL(); },          /required image url/, 'no url --> THROW');  
  t.throws(function() { ospry.formatURL({}); },        /required image url/, 'url is not a string --> THROW');  
  t.throws(function() { ospry.formatURL('abc', []); }, /required format options/, 'format options is not an object --> THROW');  
});

test('ospry.formatURL: No Formatting Options Provided', function(t) {
  t.plan(2);
  t.equal(localImageURL, ospry.formatURL(localImageURL), 'local url unchanged');
  t.equal(imageURL, ospry.formatURL(imageURL), 'public url unchanged');
});

test('ospry.formatURL: Fallback on querystring options', function(t) {
  t.plan(2);
  // Formatting options
  var u = imageURL + "?format=jpeg&maxWidth=500&maxHeight=375";
  t.equal(u, u, 'qs formatting options preserved');
  // Expiration time
  var d = new Date();
  d.setTime(Date.now() + 60 * 1000);
  u += '&timeExpired=' + encodeURIComponent(d);
  t.equal(u, u, 'qs timeExpired preserved');
});

test('ospry.formatURL: New Formatting Options', function(t) {
  t.plan(2);
  var opts = {
    format: 'png',
    maxWidth: 300,
    maxHeight: 200,
  };
  var urlWithQS = imageURL + "?format=jpeg&maxWidth=500&maxHeight=375";
  var expected = imageURL + "?format=png&maxHeight=200&maxWidth=300";

  t.equal(ospry.formatURL(imageURL, opts), expected, 'new formatting options appended');
  t.equal(ospry.formatURL(urlWithQS, opts), expected, 'new formatting options override qs');
  
});

test('ospry.formatURL: Invalid Image Format', function(t) {
  t.plan(1);
  t.throws(function() { ospry.formatURL(imageURL, {format: 'bizz'}); }, /invalid image format/, 'caught invalid format --> THROW');
});

test('ospry.formatURL: URL Signing - Expire Seconds', function(t) {
  t.plan(3);
  var opts = {
    expireSeconds: 60,
  };
  // Use expireSeconds to sign URL
  var u = url.parse(ospry.formatURL(imageURL, opts), true, true);
  t.ok(_isString(u.query.signature), 'expireSeconds causes signature');

  // Append formatting options onto a signed URL
  var signed = url.format(u);
  var signedWithQS = ospry.formatURL(signed, { format: 'gif'});
  t.equal(signedWithQS, signed + '&format=gif', 'append formatting options to signed url');

  // Establish a new expiration time for an already signed URL
  var signedWithNewExpiration = ospry.formatURL(signed, {expireSeconds: 100});
  t.notEqual(
    url.parse(signedWithNewExpiration, true, true).query.timeExpired,
    url.parse(signed, true, true).query.timeExpired, 'new expiration time used'
  );
     
});

test('ospry.formatURL: URL Signing - Expire Date', function(t) {
  t.plan(3);
  var createFutureDate = function() {
    return new Date(Date.now() + 1000000);
  };
  var opts = {
    expireDate: createFutureDate(),
  };
  // Use expireDate to sign URL
  var u = url.parse(ospry.formatURL(imageURL, opts), true, true);
  t.ok(_isString(u.query.signature), 'expireDate causes signature');

  // Append formatting options onto a signed URL
  var signed = url.format(u);
  var signedWithQS = ospry.formatURL(signed, { format: 'gif'});
  t.equal(signedWithQS, signed + '&format=gif', 'append formatting options to signed url');

  // Establish a new expiration time for an already signed URL
  var signedWithNewExpiration = ospry.formatURL(signed, {expireDate: createFutureDate()});
  t.notEqual(
    url.parse(signedWithNewExpiration, true, true).query.timeExpired,
    url.parse(signed, true, true).query.timeExpired, 'new expiration date used'
  );
     
});

// TODO: validate inputs
test('ospry.claim: Validate Inputs', function(t) {
  validateIdCallbackPair(t, ospry.claim);
});

test('ospry.claim: Claim a Public Upload', function(t) {
  if (!claimingEnabled) {
    t.skip('claiming disabled');
    t.end();
    return;
  }
  t.plan(4);
  var filename = 'public-upload.jpg';
  var claimImage = function(err, metadata) {
    t.ok(_isObject(metadata), 'public upload');
    t.equal(metadata.isClaimed, false, 'public upload not claimed');
    ospry.claim(metadata.id, function(err, newMetadata) {
      t.ok((_isObject(newMetadata) && newMetadata.id === metadata.id), 'got updated metadata');
      t.equal(newMetadata.isClaimed, true, 'image is claimed');
    });
  }
  var up = ospryPublicClient.up({
    filename: filename,
    imageReady: claimImage,
  });

  fs.createReadStream(File_SmallJPG).pipe(up);
  
});

test('ospry.makePrivate: Validate Inputs', function(t) {
  validateIdCallbackPair(t, ospry.makePrivate);
});

test('ospry.makePrivate: Make Public Image Private', function(t) {
  t.plan(3);
  var makePrivate = function(err, metadata) {
    if (err) { return console.error(err); }
    t.equal(metadata.isPrivate, false, 'uploaded image is public');
    ospry.makePrivate(metadata.id, function(err, newMetadata) {
      t.ok((_isObject(newMetadata) && newMetadata.id === metadata.id), 'got updated metadata');
      t.equal(newMetadata.isPrivate, true, 'image is private');
    });
  };
  var up = ospryPublicClient.up({
    filename: 'test-make-private.jpg',
    imageReady: makePrivate,
  });
  fs.createReadStream(File_SmallJPG).pipe(up);
});

test('ospry.makePublic: Validate Inputs', function(t) {
  validateIdCallbackPair(t, ospry.makePublic);
});

test('ospry.makePublic: Make Private Image Public', function(t) {
  t.plan(3);
  var makePublic = function(err, metadata) {
    t.equal(metadata.isPrivate, true, 'uploaded image is private');
    ospry.makePublic(metadata.id, function(err, newMetadata) {
      t.ok((_isObject(metadata) && newMetadata.id === metadata.id), 'got updated metadata');
      t.equal(newMetadata.isPrivate, false, 'image is public');
    });
  };
  var up = ospryPublicClient.up({
    filename: 'test-make-public.jpg',
    isPrivate: true,
    imageReady: makePublic,
  });
  fs.createReadStream(File_SmallJPG).pipe(up);
});

test('ospry.del: Validate Inputs', function(t) {
  validateIdCallbackPair(t, ospry.del);
});

test('ospry.del: Delete an Image', function(t) {
  t.plan(2);
  var filename = 'test-delete.jpg';
  
  var deleteImage = function(err, metadata) {
    t.ok(_isObject(metadata), 'uploaded image');
    ospry.del(metadata.id, function(err) {
      t.equal(err, null, 'image deleted');
    });
  };

  var up = ospry.up({
    filename: filename,
    imageReady: deleteImage,
  });
  fs.createReadStream(File_SmallJPG).pipe(up);
});


